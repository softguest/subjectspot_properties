// prisma/schema.prisma
datasource db {
  provider  = "mongodb"
  url  	    = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  properties    Property[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id            String    @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id            String    @id @default(cuid()) @map("_id")
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id            String    @id @default(cuid()) @map("_id")
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id            String    @id @default(cuid()) @map("_id")
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id            String    @id @default(cuid()) @map("_id")

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Property {
  id            String    @id @default(cuid()) @map("_id")
  title       String
  address     String
  distance    String
  price       String
  dateRange   String
  rating      Float
  description String
  videoUrl    String
  isFavorite  Boolean @default(false) // Indicates if the property is marked as favorite
  createdAt   DateTime @default(now()) // Tracks when the property was created
  updatedAt   DateTime @updatedAt // Tracks when the property was last updated
  gallery     String[] // Array to store image URLs

  author            User?   @relation(fields: [authorEmail], references: [email])
  authorEmail       String?
}

